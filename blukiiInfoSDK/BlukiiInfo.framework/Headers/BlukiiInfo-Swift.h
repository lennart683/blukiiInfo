// Generated by Apple Swift version 2.2 (swiftlang-703.0.18.8 clang-703.0.31)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"


/// Read only data set for 3D axis data
SWIFT_CLASS("_TtC10BlukiiInfo10BKAxisData")
@interface BKAxisData : NSObject

/// The x-Axis value
///
/// \returns  x-axis value. Int16.min if not set.
@property (nonatomic, readonly) int16_t x;

/// The y-Axis value
///
/// \returns  y-axis value. Int16.min if not set.
@property (nonatomic, readonly) int16_t y;

/// The z-Axis value
///
/// \returns  z-axis value. Int16.min if not set.
@property (nonatomic, readonly) int16_t z;
@end



/// Read only data object for sensor data that is emitted by blukii beacons
///
/// BeaconSensor values are part of <code>BKDiscoveryData
/// </code>\See 
///
/// <code>BKDiscoveryData
/// </code>
SWIFT_CLASS("_TtC10BlukiiInfo18BKBeaconSensorData")
@interface BKBeaconSensorData : NSObject

/// The value of the air pressure sensor. (Read-Only)
///
/// If the beacon does not emit air pressure the default value is Int16.min
///
/// \returns  Air pressure in hP
@property (nonatomic, readonly) int16_t airPressure;

/// The value of the light sensor. (Read-Only)
///
/// If the beacon does not emit light the default value is Int16.min
///
/// \returns  Light in Lux
@property (nonatomic, readonly) int16_t light;

/// The value of the humidity sensor. (Read-Only)
///
/// If the beacon does not emit humidity the default value is Int16.min
///
/// \returns  Humidity in percent (%)
@property (nonatomic, readonly) int16_t humidity;

/// The value of the temperature sensor. (Read-Only)
///
/// If the beacon does not emit temperature the default value is Float()
///
/// \returns  Temperature in degrees Celsius (Â°C)
@property (nonatomic, readonly) float temperature;

/// The 3D axis Valuee of the acceleration sensor.
///
/// <em>Note:</em> If the scan duration longer than one advertising interval duration the maximum value of each axis is returned
///
/// \returns  AxisData values of acceleration
@property (nonatomic, readonly, strong) BKAxisData * _Nullable acceleration;

/// The  3D axis values of magnetism sensor.
///
/// <em>Note:</em> If the scan duration is longer than one advertising interval duration the maximum value of each axis is returned
///
/// \returns  AxisData values of magnetism
@property (nonatomic, readonly, strong) BKAxisData * _Nullable magnetism;
@end

@class BKFeatureValidator;
@class BKResolveSettings;
@class BKDiscoverySettings;
@class BKInputElement;


/// <h1>Main Controller class for discovering BLE modules and resolving blukii concerned data from the blukii Info Manager.</h1>
/// BlukiiClient is a single point of contact for all data retieving actions as follows:
///
/// <ul><li>Discovering BLE modules, extracting BLE data and resolving data from blukii Info Manager (https://manager.blukiiinfo.com)</li><li>Resolving data for a single blukii module or tag from blukii Info Manager</li><li>Resolving news from blukii Info Manager</li></ul>
/// <h2>A. Discover BLE modules, extract their BLE data and resolve their data from blukii Info Manager</h2>
/// Use this feature to discover BLE modules in your environment and optionally retrieve corresponding data from blukii Info Manager.
///
/// To do this you have to do the following steps:
///
/// <h3>1. Initialize and start discovery</h3>
/// Call <code>initDiscovery()
/// </code> and implement the <code>BKClientDiscoveryDelegate
/// </code> delegates. After initialization is ready (delegate <code>onDiscoveryInitialized()
/// </code>) you can start the discovery.
///
/// <code>var mBlukiiClient: BKClient!
/// 
/// override func viewDidLoad() {
///     ...
///     mBlukiiClient = BKClient()
///     mBlukiiClient.discoveryDelegate = self
///     mBlukiiClient.initDiscovery()
///     ...
/// }
/// 
/// func onInitialized() {
///     if mBlukiiClient.startDiscovery() {
///         // Discovery successfully started
///     }
/// }
/// 
/// func onDiscoveryResult(discoveryResultList: [BlukiiInfo.BKOutputElement]) { }
/// func onDiscoveryError(errorCode: BlukiiInfo.BKClient.ErrorCode) { }
/// func onDiscoveryInfo(infoCode: BlukiiInfo.BKClient.InfoCode) { }
/// 
/// </code>
/// <h3>2. Configure discovery settings</h3>
/// Use the <code>BKDiscoverySettings
/// </code> object for configuring discovery. Get <code>BKClient.discoverySettings
/// </code> to retrieve the settings property set.
///
/// <code>func onInitialized() {
///       // Discovery successfully initialized
/// 
///       let discoverySettings: BKDiscoverySettings = mBlukiiClient.discoverySettings
///       discoverySettings.setRssiThreshold(-100)
///       discoverySettings.scanDuration = 10000
///       ...
/// 
///       if mBlukiiClient.startDiscovery() {
///           // Discovery successfully started
///       }
///  }
/// 
/// </code>
/// When BLE scanner is started the BLE discovery is acting according to the <code>BKDiscoverySettings
/// </code>:
///
/// <ul><li>The scanner is searching for BLE modules inside the defined rssi range (<code>BKDiscoverySettings.getRssiThreshold()
/// </code>).</li><li>After one scan duration (<code>BKDiscoverySettings.scanDuration
/// </code>) the results are called back to (<code>BKClientDiscoveryDelegate.onDiscoveryResult(_: )
/// </code>)</li><li>This is repeated until BLE Scanning is stopped by <code>BKClient.stopDiscovery()
/// </code> or the app did enter the background.</li><li>if the scanner is paused according to the <code>BKDiscoverySettings
/// </code> the info <code>BKClient.InfoCode.INFO_DISCOVERY_PAUSED
/// </code> is called.</li><li>For background scanning it is necessary to be in the iBeacon Region 123456789AB-CDEF-01234-00000000002 or 123456789AB-CDEF-01234-00000000003. In background it is possible to scan for iBeacon, EddystoneBeacon and InfoBeacon.</li></ul>
/// <h3>3. Configure resolver settings</h3>
/// Use the <code>BKResolveSettings
/// </code>object for configuring the resolving of the blukii Info Manager data.
///
/// Call <code>BKClient.resolveSettings
/// </code>to retrieve the settings property set.
///
/// <em>Note:</em> <code>BKResolveSettings.resolveEnabled
/// </code> has to be set true to enable the resolver!
///
/// <code>func onInitialized() {
///       // Discovery successfully initialized
/// 
///       let discoverySettings: BKDiscoverySettings = mBlukiiClient.discoverySettings
///       discoverySettings.setRssiThreshold(-100)
///       discoverySettings.scanDuration = 10000
///       ...
///       
///       // change resolver settings
///       let resolveSettings: BKResolveSettings = mBlukiiClient.resolveSettings
///       resolveSettings.resolveEnabled = true
///       resolveSettings.setLanguagePriority([BKResolveSettings.OutputLanguage.English, BKResolveSettings.OutputLanguage.German])
///       ...
/// 
///       if mBlukiiClient.startDiscovery() {
///           // Discovery successfully started
///       }
///  }
/// 
/// </code>
/// <h3>4. Retrieve results</h3>
/// The callback <code>BKClientDiscoveryDelegate.onDiscoveryResult(discoveryResultList: [BKOutputElement])
/// </code> will be called after finishing every discovery phase. It retrieves the discovered list of BKOutputElements.
///
/// <em>Note:</em> If no BLE moudles have been found discoveryResultList is empty (not nil).
///
/// <code>func onDiscoveryResult(discoveryResultList: [BKOutputElement]) {
///   // Discovery phase has finished: list of OutputElements are retrieved
/// 
///   for outputElement in discoveryResultList {
///      let id = outputElement.id
///      let rssi = outputElement.discoveryData?.rssi
///      ...
///   }
/// }
/// 
/// </code>
/// <h3>5. Retrieve errors and infos</h3>
/// The callbacks <code>BKClientDiscoveryDelegate.onDiscoveryError(BKClient.ErrorCode)
/// </code> and <code>BKClientDiscoveryDelegate.onDiscoveryInfo(BKClient.InfoCode)
/// </code> will be called if there is important information about the discover process.
///
/// <code>func onDiscoveryError(errorCode: BKClient.ErrorCode) {
///     // An error has been sent from discover
/// }
/// 
/// func onDiscoveryInfo(infoCode: BKClient.InfoCode) {
///     // An info has been sent from discovery
/// }
/// 
/// </code>
/// <h2>B. Resolve data for a single blukii module or tag from blukii Info Manager</h2>
/// Retrieve data for a module or tag from blukii Info Manager by calling <code>resolveInputElement(InputElement)
/// </code>
///
/// You have to prepare an <code>BKInputElement
/// </code> that stands for a blukii number, NFC tag or scan result. Please see <code>BKInputElement
/// </code> for more Information.
///
/// If the resolving proccess is successfull the delegate <code>BKClientResolveDelegate.onResolveInputElementResult(outputElement: BKOutputElement)
/// </code> is called.
/// Otherwise the delegate <code>BKClientResolveDelegate.onResolveInputElementError(inputElement: BKInputElement, errorCode: BKClient.ErrorCode)
/// </code> lets you know the error of the resolving proccess.
///
/// <code>mBlukiiClient.resolveDelegate = self
/// 
/// func resolveSingleElement() {
///     // call resolver
///     let inputElement = BKInputElement(tagID: "", inputType: BKInputSourceType.NFC)
///     mBlukiiClient.resolveInputElement(inputElement)
/// }
/// 
/// func onResolveInputElementResult(outputElement: BKOutputElement) {
///     let id = outputElement.id
///     let url = outputElement.resolveData?.url
/// }
/// 
/// func onResolveInputElementError(inputElement: BKInputElement, errorCode: BKClient.ErrorCode) {
///     // An error has been sent from resolver
/// }
/// 
/// </code>
/// <h2>C. Resolving news from blukii Info Manager</h2>
/// Retrieve a translated news text from the blukii Info Manager.
///
/// If the resolving process is successfull the delegate <code>BKClientNewsDelegate.onNewsResult(news: String)
/// </code> is called.
/// Otherwise the delegate <code>BKClientNewsDelegate.onNewsError(errorCode: BKClient.ErrorCode)
/// </code> lets you know the error of the resolving process.
///
/// <code>mBlukiiClient.newsDelegate = self
/// 
/// func resolveNews() {
///     mBlukiiClient.resolveServerNews("en-gb")
/// }
/// 
/// func onNewsResult(news: String) {
///     // news retrieved
/// }
/// 
/// func onNewsError(errorCode: BlukiiInfo.BKClient.ErrorCode) {
///     // An error has been sent from resolver
/// }
/// 
/// </code>
SWIFT_CLASS("_TtC10BlukiiInfo8BKClient")
@interface BKClient : NSObject

/// The Helper Object to validate application and mobile device features.
@property (nonatomic, readonly, strong) BKFeatureValidator * _Null_unspecified featureValidator;

/// Resolver Settings
@property (nonatomic, readonly, strong) BKResolveSettings * _Null_unspecified resolveSettings;

/// Discovery Settings
@property (nonatomic, readonly, strong) BKDiscoverySettings * _Null_unspecified discoverySettings;

/// Constructor for initiating a blukii client.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;

/// Gets the state if BLE scanner is actuallly running.
///
/// \returns  true, if BLE scanner is scanning
- (BOOL)isDiscovering;

/// Initializes the discovery service.
///
/// If successful, the delegate <code>BKClientDiscoveryDelegate.onDiscoveryInitialized()
/// </code> is called.
/// Otherwise the delegate `BKClientDiscoveryDelegate.onDiscoveryError(errorCode: BKClient.ErrorCode) is called with an error.
///
/// <em>Note</em>: By calling this function the service instance BKDeviceDiscoveryService is started and binded by the BKClient object. This is required before calling <code>startDiscovery()
/// </code> and <code>stopDiscovery()
/// </code> for starting and stopping the discovery for BLE modules. Without <code>startDiscovery()
/// </code>BKDeviceDiscoveryService is not do any action and therefore not using the battery.
///
/// <em>Note</em>: Use this function only, if the view is loaded. For Example viewDidAppear.
- (void)initDiscovery;

/// Gets the state if the discovery service is initialized.
///
/// \returns  true, if discovery service is initialized
- (BOOL)isDiscoveryInitialized;

/// Starts the BLE scanner.
///
/// It only can be started if the discovery service has been initialized befor by calling initDiscovery()!
///
/// <em>Background mode</em>: If the app change to the background, the scan will not stop. Conditions:
///
/// <ul><li>capabilities -> Background Modes -> Location Update -> enable</li><li>capabilities -> Background Modes -> Use Bluetooth LE accessoires -> enable</li><li>info.plist: Enter a value for NSLocationAlwaysUsageDescription</li><li><code>BKDiscoverySettings.scanInBackground
/// </code> -> true</li></ul>
/// <em>Note</em>: Only when the BLE scanner is started successfully the <code>BKClientDiscoveryDelegate
/// </code> delegates are called if there is any discovery result, error or info.
///
/// You can stop scanning by calling <code>stopDiscovery()
/// </code>
///
/// \returns  true, if start is successful.
- (BOOL)startDiscovery;

/// Stops the BLE scanner.
///
/// You can start scanning by calling <code>startDiscovery()
/// </code>
///
/// \returns  true, if stop is successful.
- (BOOL)stopDiscovery;

/// Starts the resolver to retrieve blukii Info Manager data of one single element.
///
/// Results will be asynchronously returned with the callbacks of the <code>BKClientResolveDelegate
/// </code> delegate.
///
/// <em>Note</em>: BKResolveSettings.getLanguagePriority() is the only property that takes affect for resolving single elements. All other BKResolveSettings properties are affecting the discovery process only!
///
/// \param input <code>BKInputElement
/// </code> Data with specified format. therefore see <code>BKInputElement
/// </code>
- (void)resolveInputElement:(BKInputElement * _Nonnull)input;

/// Starts the resolver to retrieve a translated blukii Info Manager news text.
///
/// Results will be asynchronously returned by the delegates of the <code>BKClientNewsDelegate
/// </code>
///
/// \param languageId language code for the translation, supported languages: <code>BKResolveSettings.OutputLanguage
/// </code>
- (void)resolveServerNews:(NSString * _Nonnull)languageId;
@end

@class NSDate;
@class NSUUID;
@class CBPeripheral;
@class BKEddystoneData;
@class BKiBeaconData;
@class BKKeyData;


/// Read only data object for emitted data of on BLE module.
///
/// <code>BKDiscoveryData
/// </code> is a collection of BLE data that is scanned during one scan duration for one BLE module.
///
/// It contains the following values if it is provided by the module's hardware and firmware
///
/// <ul><li>Device found date</li><li>RSSI value</li><li>blukii Hardware specific advertising data like firmware, blukii type, advertising interval, battery and txPower</li><li>Sensor data results of blukii sensor beacons. See <code>BKBeaconSensorData
/// </code></li><li>Key data of blukii SmartKeys. See <code>BKKeyData
/// </code></li><li>Eddystone protocol data values. See <code>BKEddystoneData
/// </code></li><li>iBeacon protocol data values. See <code>BKiBeaconData
/// </code></li></ul>
/// <em>Note</em>: If the scan scan duration (see <code>BKDiscoverySettings.scanDuration
/// </code>) is longer than the advertising interval of the module than each value is read only once. The following data frames of the same type are ignored if the corresponding fields are already set in the <code>BKDiscoveryData
/// </code> object.
/// The discovery date (<code>deviceFoundDate
/// </code>) is the timestamp of the first BLE frame that is scanned by the mobile device.
///
/// <code>BKDiscoveryData
/// </code> is a part of <code>BKOutputElement
/// </code>
/// It will be set if the <code>BKOutputElement
/// </code> is returned by the delegate function <code>BKClientDiscoveryDelegate.onDiscoveryResult(discoveryResultList: [BKOutputElement])
/// </code> after calling BKClient.initDiscovery(). For Other BKClient delegates BKDiscoveryData is <code>nil
/// </code>.
SWIFT_CLASS("_TtC10BlukiiInfo15BKDiscoveryData")
@interface BKDiscoveryData : NSObject

/// Gets the Timestamp of the first scanned BLE frame that is inside the relevant RSSI range (see setting BKDiscoverySettings.setRSSIThreshold()).
///
/// This field is set for every scanned BLE module.
///
/// \returns  Timestamp in milliseconds
@property (nonatomic, readonly, strong) NSDate * _Nullable deviceFoundDate;

/// Gets the MacAdress of the BLE module
///
/// \returns  MAC-Adress of the BLE module
@property (nonatomic, readonly, copy) NSString * _Nullable macAddress;

/// Gets the Identifier of the BLE module
///
/// This field is set for every scanned BLE module. This value is to prefer, if you want to have a uniqe identifier.
///
/// \returns  CBPeripheral Identifier
@property (nonatomic, readonly, strong) NSUUID * _Nullable identifier;

/// Gets the Device Name of the BLE module.
///
/// This field is set for every scanned BLE module.
///
/// \returns  Device Name
@property (nonatomic, readonly, copy) NSString * _Nullable deviceName;

/// Gets the Bluetooth Device Object (CBPeripheral) of the BLE module.
///
/// This field is set for every scanned BLE module
///
/// \returns  CBPeripheral Object
@property (nonatomic, readonly, strong) CBPeripheral * _Nullable device;

/// Gets a data object of blukii sensor data.
///
/// This field is only valid for blukii beacons that contain sensors.
///
/// \returns  BeaconSensorData object, <code>nil
/// </code> if no blukii beacon sensors are available
@property (nonatomic, readonly, strong) BKBeaconSensorData * _Nullable beaconSensorData;

/// Gets the firmware number of a blukii
///
/// It is a 4-digit string that you have to inerpret as follows for blukii 2.0: Firmware = ABCD means firmware number A.B.C.D
///
/// For blukii 3.0 you have to interpret as follow: Firmware = AAABBB menas firmware number AAA.BBB
///
/// \returns  Firmware string, <code>nil
/// </code> if it is not supported
@property (nonatomic, readonly, copy) NSString * _Nullable firmware;

/// Gets the Product ID of a blukii
///
/// This field can be "blukii 2.0" or "blukii 3.0"
///
/// \returns  Product ID string, nil if it is not supported
@property (nonatomic, readonly, copy) NSString * _Nullable product;

/// Gets data object of Eddystone beacon data.
///
/// This field is only valid for beacons that emit Eddystone UID, URL or TLM.
///
/// \returns  <code>BKEddystoneData
/// </code> Object, <code>nil
/// </code> if it is not a Eddystone beacon
@property (nonatomic, readonly, strong) BKEddystoneData * _Nullable eddystoneData;

/// Gets a data object of iBeacon data.
///
/// This field is only valid for beacons that emit iBeacon
///
/// \returns  <code>BKiBeaconData
/// </code> object, <code>nil
/// </code> if it is not a iBeacon
@property (nonatomic, readonly, strong) BKiBeaconData * _Nullable iBeaconData;

/// Gets a data object of key data.
///
/// this field is only valid for blukii SmartKeys.
///
/// \returns  KeyData object, nil if it is not a blukii Smart Key
@property (nonatomic, readonly, strong) BKKeyData * _Nullable keyData;

/// Gets the advertising interval of a blukii.
///
/// This field is only valid for Blukiis
///
/// \returns  advertising interval in milliseconds, 0 if is not a blukii
@property (nonatomic, readonly) NSInteger advInterval;

/// Gets the battery level value of a blukii
///
/// \returns  Battery charge in percent, <code>Int.min
/// </code> if it is not supported
@property (nonatomic, readonly) NSInteger battery;

/// Gets the txPower value of a blukii.
///
/// It stands for the physical hardware setting of the BLE sender.
///
/// This field is only valid for blukiis.
///
/// \returns  TxPower in dBm, <code>Int16.min
/// </code> if it is not supported.
@property (nonatomic, readonly) int16_t txPower;
@end



/// Property set of settings to configure the discovering process.
///
/// The DiscoverySettings properties are affecting the discovery process that is started by <code>BKClient.initDiscovery()
/// </code> and the <code>BKDiscoveryData
/// </code> contents of the result delegate.
///
/// You can access the DiscoverySettings by <code>BKClient.discoverySettings
/// </code>
///
/// Every setting value is writeable and has a default value that is used if not changed by the developer.
SWIFT_CLASS("_TtC10BlukiiInfo19BKDiscoverySettings")
@interface BKDiscoverySettings : NSObject

/// Maximum value for rssi threshold: -20
@property (nonatomic, readonly) NSInteger RSSI_MAX;

/// Minimum value for rssi threshold: -120
@property (nonatomic, readonly) NSInteger RSSI_MIN;

/// Defautl value for rssi threshold: -85
@property (nonatomic, readonly) NSInteger RSSI_DEFAULT;

/// Gets the rssi threshold for the discovery.
///
/// BLE moduels with a higher rssi value will be discovered only.
///
/// \returns  rssi threshold value, default is <code>RSSI_DEFAULT
/// </code>
- (NSInteger)getRssiThreshold;

/// Sets the rssi threshold for the discovery.
///
/// BLE modules with a higher rssi value will be discovered only.
///
/// The valid range for the rssi threshold is limited by <code>RSSI_MIN
/// </code> and <code>RSSI_MAX
/// </code>
- (void)setRssiThreshold:(NSInteger)rssiThreshold;

/// Scan duration of one discovery phase: 5000 milliseconds.
@property (nonatomic, readonly) NSInteger SCANDURATION_DEFAULT;

/// Value of the duration of one discovery phase in milliseconds. Default is SCANDURATION_DEFAULT
///
/// After the scan duration has finished all scanned BLE data is saved into a List of BKOutputElement and returned by delegate  <code>BKClientDiscoveryDelegate.onDiscoveryResult(discoveryResultList: [BKOutputElement])
/// </code>
@property (nonatomic) NSInteger scanDuration;

/// Enables / Disables Background scanning.
///
/// <em>Background mode</em>: If the app change to the background, the scan will not stop. Conditions:
///
/// <ul><li>capabilities -> Background Modes -> Location Update -> enable</li><li>capabilities -> Background Modes -> Use Bluetooth LE accessoires -> enable</li><li>info.plist: Enter a value for NSLocationAlwaysUsageDescription</li></ul>
/// For power saving BLE scan is only in a iBeacon region active (Default-Region: 01234567-89AB-CDEF-000000000001 and 01234567-89AB-CDEF-000000000002) . If you want to scan an InfoBeacon in Background, you have to configure the blukii smartBeacon in Multimode, so that the blukii smartBeacon send iBeacon an infoBeacon protocol.
@property (nonatomic) BOOL scanInBackground;

/// Value, if discovery should scan for non blukii BLE modules.
///
/// <em>Note:</em> The majority of <code>BKOutputElement
/// </code> data is only supported for blukii modules: <code>BKBeaconSensorData
/// </code>, <code>BKResolveData
/// </code> and some value of <code>BKDiscoveryData
/// </code>. <code>BKEddystoneData
/// </code> and <code>BKiBeaconData
/// </code> is also supported for non blukii modules.
///
/// Default value is false
@property (nonatomic) BOOL scanNonBlukiis;

/// Sets the stat if discovery should scan for sensor data of blukii beacons.
///
/// If this flag is set <code>BKOutputElement.discoveryData
/// </code> may contain a valid <code>BKBeaconSensorData
/// </code> object.
///
/// <em>Note:</em> This flag is only relevant for blukii beacons
///
/// Default value is true
@property (nonatomic) BOOL scanBeaconSensorData;

/// Sets the state if discovery should scan for Eddystone data.
///
/// If this flag is set <code>BKOutputElement.discoveryData
/// </code> may contain a valid <code>BKEddystoneData
/// </code> object.
///
/// Default value is false
@property (nonatomic) BOOL scanEddystoneData;

/// Set the state if discovery should scan for iBeacon data.
///
/// If this flag is set <code>BKOutputElement.discoveryData
/// </code> may contain a valid <code>BKiBeaconData
/// </code> object.
///
/// <em>Note:</em> For scanning iBeacons in the info.plist it is reuqiered to enter a value for NSLocationAlwaysUsageDescription.
///
/// Default value is false
@property (nonatomic) BOOL scanIBeaconData;

/// Default Value iBeacon UUID Regions
///
/// Values:
///
/// <ul><li>01234567-89AB-CDEF-0123-000000000001</li><li>01234567-89AB-CDEF-0123-000000000002</li></ul>
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull IBEACONREGIONS_DEFAULT;

/// Set the Regions that will be scanned by the Discovery Service.
///
/// Default Value is IBEACONREGIONS_DEFAULT
///
/// \param regions Array with Region IDs
- (void)setScanIBeaconRegions:(NSArray<NSString *> * _Nonnull)regions;

/// Get the Ragions that will be scanned by the Discovery Service.
///
/// \returns  Array with the Region UUID as String
- (NSArray<NSString *> * _Nonnull)getScanIBeaconRegions;
@end



/// Read only data object for Eddystone data that is emitted by beacons
///
/// See Eddystone specification at https://github.com/google/eddystone/blob/master/protocol-specification.md
///
/// <code>BKEddystoneData
/// </code> can contain data of unencrypted EddyStone UID, URL and TLM.
///
/// <code>BKEddystoneData
/// </code> values are part of <code>BKDiscoveryData
/// </code>.
SWIFT_CLASS("_TtC10BlukiiInfo15BKEddystoneData")
@interface BKEddystoneData : NSObject

/// The UIDNamespace if the beacon is emitting an Eddystone UID
@property (nonatomic, readonly, copy) NSString * _Nullable uidNamespace;

/// The Instance ID if the beacon is emitting an Eddystone UID
@property (nonatomic, readonly, copy) NSString * _Nullable uidInstance;

/// The url string if the beacon is emitting an Eddystone URL
@property (nonatomic, readonly, copy) NSString * _Nullable url;

/// The battery charge value if the Beacon is emitting Eddystone TLM
///
/// \returns  Battery charge in mV, 0 if the blukii has USB power, <code>Int.min
/// </code> if it is not supported
@property (nonatomic, readonly) NSInteger battery;

/// the number of frame packets since the last beacon reset if the beacon is emitting Eddystone TLM
///
/// \returns  Number of frame packets since last reset, 0 if it is not supported
@property (nonatomic, readonly) NSInteger packets;

/// The Time since the last beacon reset if the beacon is emitting Eddystone TLM
///
/// \returns  Number of seconds since last reset, 0 if it is not supported.
@property (nonatomic, readonly) NSInteger activeTime;
@end

@class CBCentralManager;


/// Helper class to validate application and mobile device features
SWIFT_CLASS("_TtC10BlukiiInfo18BKFeatureValidator")
@interface BKFeatureValidator : NSObject

/// Checks if the App is on foreground
///
/// \returns  true if App is on foreground
- (BOOL)isAppOnForeground;

/// Checks if the device is connected to the internet.
///
/// \returns  true if connected to the internet
- (BOOL)isConnectedToInternet;

/// Checks if Bluetooth is enabled on the device
///
/// \returns  true if Bluetooth is enabled
- (BOOL)bluetoothIsEnabled:(CBCentralManager * _Nonnull)centralManager;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Data Object that defines the input data for resolving requests to blukii Info Manager (https://manager.blukiiinfo.com).
///
/// It is used in two cases:
///
/// <ul><li><em>Delegate</em> <code>BKClientDiscoveryDelegate.onDiscoveryResult(discoveryResultList: [BKOutputElement])
/// </code>:</li></ul>
/// <code>BKInputElement
/// </code> is part of every <code>BKOutputElement
/// </code>. It contains input type <code>BKInputSourceTpye.BLUKII
/// </code> and the device name of the discovered BLE module.
///
/// <ul><li><em>Function</em> <code>BKClient.resolveInputElement(BKInputElement)
/// </code>:</li></ul>
/// <code>BKInputElement
/// </code> is used as input property for a single recolving action. It has to be created by initializer <code>BKInputElement(String, BKInputSourceType)
/// </code>.
/// If resolving is successful it will be unmodified part of <code>BKOutputElement
/// </code> that is returned by delegate <code>BKClientResolveDelegate.onResolveInputElementResult(outputElement: BKOutputElement)
/// </code>
SWIFT_CLASS("_TtC10BlukiiInfo14BKInputElement")
@interface BKInputElement : NSObject

/// Gets the tag id.
///
/// \returns  formatted input string
@property (nonatomic, readonly, copy) NSString * _Nonnull tagID;
@end



/// Read only data set for blukii SmartKey
SWIFT_CLASS("_TtC10BlukiiInfo9BKKeyData")
@interface BKKeyData : NSObject

/// Gets the state if the SmartKey has been time synced since last restart
@property (nonatomic, readonly) BOOL timeSync;
@end

@class BKResolveData;


/// Read only data object for data of BLE discover and resolving process.
///
/// <code>BKOutputElement
/// </code> is returned by delegates of the BKClient functions for discovery and resolve of BLE modules.
///
/// It is an combination of data that is encapsulated in specific data objects:
///
/// <ul><li><code>BKInputElement
/// </code>: input data that is created by discovery process (blukii number) or external inputs (NFC tag id, scan of barcodes).
/// A cnversion of the <code>BKInputelement.tagID
/// </code> is saved in <code>id
/// </code></li><li><code>BKDiscoveryData
/// </code>: emitted data of the BLE module</li><li><code>BKResolveData
/// </code>: resolved data requested from blukii Info Manager (https://manager.blukiiinfo.com)
/// The state of resolve process is saved by <code>resolveState
/// </code></li></ul>
SWIFT_CLASS("_TtC10BlukiiInfo15BKOutputElement")
@interface BKOutputElement : NSObject

/// The blukii number of the OutputElement
///
/// In Some cases it is a coversion of the input tag id (see <code>BKInputElement.tagID
/// </code>)
///
/// If it is an iBeacon the id is &lt;UUID&gt;&lt;Major&gt;&lt;Minor&gt;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;

/// The resolved data from blukii Info Manager (https://manager.blukiiinfo.com)
///
/// For more information see <code>BKResolveData
/// </code>
///
/// returns the data object of resolved data
@property (nonatomic, readonly, strong) BKResolveData * _Nullable resolveData;

/// The emitted BLE data of one module
///
/// For more information see BKDiscoveryData
///
/// returns data object of discovered BLE data
@property (nonatomic, readonly, strong) BKDiscoveryData * _Nullable discoveryData;

/// The input data (tag id and type)
///
/// For more Information see <code>BKInputElement
/// </code>
///
/// returns data object of input data
@property (nonatomic, readonly, strong) BKInputElement * _Nullable inputElement;
@end



/// Read only data object for resolved output data of the blukii info manager
///
/// <code>BKResolveData
/// </code> can be valid for blukii modules only.
///
/// It contains the result of a data request to the blukii Info Manager (https://manager.blukiiinfo.com).
/// The <code>BKResolveData
/// </code> fields contain the values of on corresponding blukii number.
///
/// <code>BKResolveData
/// </code> is part of <code>BKOutputElement
/// </code>
///
/// It will be set for the following cases:
///
/// <ul><li>OutputElement ID (see <code>BKOutputElement.id
/// </code>) must be configured as a blukii number on the blukii Info Manager by an Info Manger user. This is an requierement for all <code>BKClient
/// </code> delegates!</li><li><code>BKResolveData
/// </code> will be requested during the discovery (see <code>BKClient.initDiscovery()
/// </code>) for all discovered Elelements if the setting <code>BKResolveSettings.resolveEnabled
/// </code> is set true. If some data is responded it will be returned as part of an <code>BKOutputElement
/// </code> by delegate <code>BKClientDiscoveryDelegate.onDiscoveryResult(discoveryResultList: [BKOutputElement])
/// </code> The result state of resolving can additionally be read by calling <code>BKOuputElement.resolveState
/// </code>:<ul><li>UNRESOLVED: Resolve is off (<code>BKResolveSettings.resolveEnabled
/// </code> is false) or blukii Info Manager is not connectable</li><li>RESOLVED: blukii Info Manager has responded data for the OutputElement ID</li><li>NODATA: blukii Info Manager is connectable but has responded no data for the OutputElement ID</li><li>CACHED: ResolveData contains cached data that has been responded earlier (see cache settings on <code>BKResolveSettings
/// </code>)</li></ul></li><li><code>BKResolveData
/// </code> will be requested for a single Element by calling (see <code>BKClient.resolveInputElement(BKInputElement)
/// </code>). If some data is responded it will be returned as part of an <code>BKOutputElement
/// </code> by delegate <code>BKClientResolveDelegate.onResolveInputElementResult(outputElement: BKOutputElement)
/// </code>. The result state of resolving can additionally be read by calling <code>BKOutputElement.resolveState
/// </code>. For single element requests there is no cache available.<ul><li>RESOLVED: blukii Info Manager has responded data for the OutputElement ID</li><li>NODATA: blukii Info Manager has not responded data for the OutputElement ID</li></ul></li></ul>
SWIFT_CLASS("_TtC10BlukiiInfo13BKResolveData")
@interface BKResolveData : NSObject

/// The value of the language specific blukii number field Title
///
/// The language is defined by property <code>language
/// </code>.
///
/// <em>Note:</em> If the language specific field <em>Title</em> is not set <code>title
/// </code> contains the value of field <em>Name</em> (as fallback)
///
/// Value of blukii number field <em>Title</em>
@property (nonatomic, readonly, copy) NSString * _Nullable title;

/// The Value of the language specific blukii number field URL
///
/// The language is defined by property <code>language
/// </code>
///
/// <em>Note:</em> In most cases getUrl returns an url to a OutputType specific file. Exceptions are:
///
/// <ul><li>OutputType <code>BKOutputType.MESSAGE
/// </code>: The message text itself will be returned.</li><li>Resolving single elements of <code>BKInputSourceType.SCAN
/// </code> by <code>BlukiiClient.resolveInputElement(BKInputElement)
/// </code>: If you resolve a QR code with format <code>BKOutputType.WIFI
/// </code> or <code>BKOutputType.VCARD
/// </code> the WIFI or VCARD formatted code will be returned.</li></ul>
@property (nonatomic, readonly, copy) NSString * _Nullable url;

/// The output language of the BKResolveData set.
///
/// It shows the language specific selection of the blukii number fields <code>url
/// </code> and <code>title
/// </code>, for <code>BKOutputType.PDF
/// </code> also of <code>urlExtra
/// </code> and <code>plainTextExtra
/// </code>
///
/// The output language is chosen by the resolver process. If only one language specific blukii number URL and title is defined it will be returned. Otherwise the language is chosen according the language priority setting (see <code>BKResolveSettings.getLanguagePriority()
/// </code>)
///
/// The value can be one of the following languages codes: en-gb, fr-fr or de-de
@property (nonatomic, readonly, copy) NSString * _Nullable language;

/// Gets the value of the language specific blukii number field Audio File URL.
///
/// The language is defined by property <code>language
/// </code>.
///
/// <em>Note:</em> This field is optional and only valid for OutputType <em>PDF</em> (see <code>outputType
/// </code>). It contains a url of an audio file.
@property (nonatomic, readonly, copy) NSString * _Nullable urlExtra;

/// The value of the language specific blukii number field Text to speech.
///
/// The language is defined by property <code>language
/// </code>.
///
/// <em>Note:</em> This field is optional and only valid for OutputType <em>PDF</em> (see <code>outputType
/// </code>). It contains a text.
@property (nonatomic, readonly, copy) NSString * _Nullable plainTextExtra;

/// The value of the date where the blukii Number was resolved
///
/// \returns  NSDate object
@property (nonatomic, readonly, strong) NSDate * _Nonnull resolveDate;
@end



/// Property set of settings to configure the resolving process of data from blukii Info Manager (https://manager.blukiiinfo.com)
///
/// You can access the BKResolveSettings by calling <code>BKClient.resolveSettings
/// </code>
///
/// Every settings value is writeable and has a default value that is used if not changed by the developer.
///
/// With the exception of <code>getLanguagePriority()
/// </code> the ResolveSettings properties are only affecting the discovery process that is started by <code>BKClient.initDiscovery()
/// </code>
///
/// For the single resolving process that is started by <code>BKClient.resolveInputElement(input: BKInputElement)
/// </code> only <code>getLanguagePriority()
/// </code> is relevant.
SWIFT_CLASS("_TtC10BlukiiInfo17BKResolveSettings")
@interface BKResolveSettings : NSObject

/// Gets the language priority that is relevant for the selection of the language specific BKResolveData fields like url and title.
///
/// \returns  String Array of language ids, default is <code>LANGUAGEPRIORITY_DEFAULT
/// </code> (de-de, fr-fr, en-gb)
- (NSArray<NSString *> * _Nonnull)getLanguagePriorityString;

/// Sets the language priority that is relevant for the selection of the language specific BKResolveData fields like url and title
///
/// \param localeIds array of String language ids (de-de, fr-fr, en-gb)
- (BOOL)setLanguagePriority:(NSArray<NSString *> * _Nonnull)localeIds;

/// The state if the resolver is enabled for discovered BLE modules
///
/// Default: false
@property (nonatomic) BOOL resolveEnabled;

/// Default cache timeout: 180000 milliseconds (30 mintues)
@property (nonatomic, readonly) NSInteger CACHETIMEOUT_DEFAULT;

/// The Timeout for the resolver cache.
///
/// You can use this feature to minimize network traffic by caching resolved values. If <code>BKResolveData
/// </code> is found for one blukii number the next network request will be done again only after cache timeout.
///
/// You have to consider the following application states to define when caching should be enabled:
///
/// <ul><li><code>isCacheEnabledOnForeground()
/// </code>: App is in foreground</li><li><code>isCacheEnabledOnBackground()
/// </code>: App is in background</li></ul>
/// Cache Timout in milliseconds, default is <code>CACHETIMEOUT_DEFAULT
/// </code>
@property (nonatomic) NSInteger cacheTimeout;

/// The state if cache is enabled when App is in foreground
///
/// cache enabled state, default is false
@property (nonatomic) BOOL cacheEnabledOnForeground;

/// The state if cache is enabled when App is in background
///
/// cache enabled state, default is true
@property (nonatomic) BOOL cacheEnabledOnBackground;
@end

@class NSNumber;


/// <h1>Read only data object for iBeacon data that is emitted by beacons</h1>
/// See iBeacon specification at https://developer.apple.com/ibeacon
///
/// iBeaconData values are part of <code>BKDiscoveryData
/// </code>
SWIFT_CLASS("_TtC10BlukiiInfo13BKiBeaconData")
@interface BKiBeaconData : NSObject

/// The UUID if the beacon is emitting iBeacon
@property (nonatomic, readonly, strong) NSUUID * _Null_unspecified uuid;

/// The Major ID if the beacon is emitting iBeacon
@property (nonatomic, readonly, strong) NSNumber * _Null_unspecified major;

/// The Minor ID if the beacon is emitting iBeacon
@property (nonatomic, readonly, strong) NSNumber * _Null_unspecified minor;
@end

#pragma clang diagnostic pop
